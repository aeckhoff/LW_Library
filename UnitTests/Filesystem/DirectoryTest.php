<?php
error_reporting(E_ALL & ~E_NOTICE & ~E_DEPRECATED);
require_once dirname(__FILE__) . '/../Config/phpUnitConfig.php';
require_once dirname(__FILE__) . '/../../Filesystem/Directory.php';

/**
 * Test class for Directory.
 * Generated by PHPUnit on 2013-02-21 at 11:27:58.
 */
class DirectoryTest extends \PHPUnit_Framework_TestCase
{
    private $directoryObject_base;
    private $directoryObject2;
    private $config;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->config = phpUnitConfig::getConfig();

        $this->directoryObject_base = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"]);
        $this->assertTrue(is_object($this->directoryObject_base));
        $this->assertTrue($this->directoryObject_base->check());

        $this->directoryObject2 = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/");
        if(!$this->directoryObject2->check()) {
            $this->assertTrue($this->directoryObject_base->add("test_lw_directory"));
        } else {
            $this->directoryObject2->delete(true);
            $this->setUp();
        }
        $this->assertTrue(is_object($this->directoryObject2));
        $this->assertTrue($this->directoryObject2->check());
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->assertTrue($this->directoryObject2->delete(true));
        $this->assertFalse($this->directoryObject2->check());
    }

    /**
     * @todo Implement testGetInstance().
     */
    public function testGetInstance()
    {
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/");
        $this->assertTrue(is_object($dir));

        $dir = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/gibtEsNicht/");
        $this->assertTrue(is_object($dir));
    }

    /**
     * @todo Implement testGetType().
     */
    public function testGetType()
    {
        $this->assertEquals("dir", $this->directoryObject2->getType());
    }

    /**
     * @todo Implement testAddInvalidContent().
     */
    public function testAddInvalidContent()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testRemoveInvalidContent().
     */
    public function testRemoveInvalidContent()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDelete().
     */
    public function testDelete()
    {
        $this->assertTrue($this->directoryObject2->add("test1/"));
        
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/test1/");
        $this->assertTrue(is_object($dir));
        $this->assertTrue($dir->check());
        $this->addfile($dir->getPath());

        try {
            $dir->delete();
        } catch (\Exception $e) {
            $this->assertEquals($e->getMessage(), "[L&ouml;schen nicht m&ouml;glich] Das Verzeichnis ist nicht leer");
        }

        $this->assertTrue($dir->delete(true));
    }

    /**
     * @todo Implement testRename().
     */
    public function testRename()
    {
        $this->assertTrue($this->directoryObject2->add("test1/"));
        $this->assertTrue($this->directoryObject2->add("test2/"));
        
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/test1/");
        $dir2 = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/test2/");
        
        $newname = "renamedDir/";
        $this->assertTrue($dir2->rename($newname));
        $dir2 = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/".$newname);
        
        try {
            $dir->rename($newname);
        } catch (\Exception $e) {
            $this->assertEquals($e->getMessage(), "[Umbennenen nicht m&ouml;glich] Das Verzeichnis existiert bereits");
        }
        
        $this->assertTrue($dir->delete());
        $this->assertTrue($dir2->delete());
        
    }

    /**
     * @todo Implement testRenameFile().
     */
    public function testRenameFile()
    {
        $this->addfile($this->directoryObject2->getPath());
        $this->assertTrue($this->directoryObject2->fileExists("test.txt"));
        $this->assertTrue($this->directoryObject2->renameFile("test.txt", "renamedTest.txt"));
        $this->assertFalse($this->directoryObject2->fileExists("test.txt"));
        $this->assertTrue($this->directoryObject2->fileExists("renamedTest.txt"));
    }

    /**
     * @todo Implement testAdd().
     */
    public function testAdd()
    {
        $this->assertTrue($this->directoryObject2->add("hallo/"));
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."hallo/");
        $this->assertTrue($dir->check());
        $dir->delete();
    }

    /**
     * @todo Implement testMove().
     */
    public function testMove()
    {
        $this->testRename();
    }

    /**
     * @todo Implement testAddFile().
     */
    public function testAddFile()
    {
        $this->addfile($this->directoryObject2->getPath());
        $this->assertTrue($this->directoryObject2->add("copyIn"));
        
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."copyIn/");
        $this->assertFalse($dir->getDirectoryContents());
        
        $dir->addFile($this->directoryObject2->getPath()."test.txt", "newTest.txt");
        
        $lw_file = $this->getFileMock();
        $lw_file->expects($this->any())
              ->method('__construct')
              ->will($this->returnValue(array(
                    "path" => $this->directoryObject2->getPath(),
                    "name" => "newTest.txt"
              )));
        
        $items = $dir->getDirectoryContents();
        
        $d = 0; #directory
        $i = 0; #imagefile
        $f = 0; #file
        foreach($items as $key => $value) {
            $key = substr($key, 0, 1);
            switch ($key) {
                case "d": $d++; break;
                case "i": $i++; break;
                case "f": $f++; break;
            }
        }
        
        $this->assertEquals($d, 0);
        $this->assertEquals($i, 0);
        $this->assertEquals($f, 1);
        
        $dir->delete(true);
    }

    /**
     * @todo Implement testChmodFile().
     */
    public function testChmodFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testChgrpFile().
     */
    public function testChgrpFile()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testDeleteFile().
     */
    public function testDeleteFile()
    {
        $this->addfile($this->directoryObject2->getPath());
        $this->assertTrue($this->directoryObject2->deleteFile("test.txt"));
        $this->assertFalse($this->directoryObject2->getDirectoryContents("file"));
    }

    /**
     * @todo Implement testGetDirectoryContents().
     */
    public function testGetDirectoryContents()
    {
        $this->assertFalse($this->directoryObject2->getDirectoryContents("dir")); #no dirrectories in this dir
        $this->directoryObject2->add("folder1/");
        $this->directoryObject2->add("folder2/");
        
        $this->addfile($this->directoryObject2->getPath());
        $this->addFileWithImgExt($this->directoryObject2->getPath());
        
        $lw_file = $this->getFileMock(); 
        $lw_imagefile = $this->getImageFileMock();
        
        $lw_file->expects($this->any())
              ->method('__construct')
              ->will($this->returnValue(array(
                    "path" => $this->directoryObject2->getPath(),
                    "name" => "test.txt"
              )));
        
        $lw_imagefile->expects($this->any())
              ->method('__construct')
              ->will($this->returnValue(array(
                    "path" => $this->directoryObject2->getPath(),
                    "name" => "test.jpg"
              )));

        $items = $this->directoryObject2->getDirectoryContents();
        
        $d = 0; #directory
        $i = 0; #imagefile
        $f = 0; #file
        foreach($items as $key => $value) {
            $key = substr($key, 0, 1);
            switch ($key) {
                case "d": $d++; break;
                case "i": $i++; break;
                case "f": $f++; break;
            }
        }
        
        $this->assertEquals($d, 2);
        $this->assertEquals($i, 1);
        $this->assertEquals($f, 1);
        
        $folder1 =  LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."folder1/");
        $folder2 =  LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."folder2/");
        $this->assertTrue($folder1->delete());
        $this->assertTrue($folder2->delete());
    }

    /**
     * @todo Implement testGetName().
     */
    public function testGetName()
    {
        $this->assertEquals("test_lw_directory/", $this->directoryObject2->getName());
    }

    /**
     * @todo Implement testGetSize().
     */
    public function testGetSize()
    {
        $this->assertEquals(0, $this->directoryObject2->getSize());
    }

    /**
     * @todo Implement testGetDate().
     */
    public function testGetDate()
    {
        $this->assertFalse($this->directoryObject2->getDate());
    }

    /**
     * @todo Implement testGetBasepath().
     */
    public function testGetBasepath()
    {
        $this->assertEquals($this->directoryObject2->getBasePath(), $this->config["path"]["web_resource"]);
    }

    /**
     * @todo Implement testGetPath().
     */
    public function testGetPath()
    {
        $this->assertEquals($this->config["path"]["web_resource"] . "test_lw_directory/", $this->directoryObject2->getPath());
    }

    /**
     * @todo Implement testCheck().
     */
    public function testCheck()
    {
        $this->assertTrue($this->directoryObject2->check());
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->config["path"]["web_resource"] . "test_lw_directory/gibtEsNicht/");
        $this->assertFalse($dir->check());
    }

    /**
     * @todo Implement testGetNextFilename().
     */
    public function testGetNextFilename()
    {
        $this->assertEquals("test.txt", $this->directoryObject2->getNextFilename("test.txt")); #file not existing-> name can be used
        $this->addfile($this->directoryObject2->getPath());
        $str = "test.txt";
        $this->assertEquals("test_2.txt", $this->directoryObject2->getNextFilename("test.txt"));
    }

    /**
     * @todo Implement testFileExists().
     */
    public function testFileExists()
    {
        $this->addfile($this->directoryObject2->getPath());
        $this->assertTrue($this->directoryObject2->fileExists("test.txt"));
        $this->assertFalse($this->directoryObject2->fileExists("gibtEsNicht.txt"));
    }

    /**
     * @todo Implement testIsWritable().
     */
    public function testIsWritable()
    {
        $this->assertFalse($this->directoryObject2->isWritable("hallo/")); #dir hallo not existing
        $this->assertTrue($this->directoryObject2->add("hallo/"));#dir hallo is existing, now
        $this->assertTrue($this->directoryObject2->isWritable("hallo/")); 
        $dir = LwLibrary\Filesystem\Directory::getInstance($this->directoryObject2->getPath()."hallo/");
        $this->assertTrue($dir->delete());
    }

    
    public function addfile($path)
    {
        $string = "test text ohne viel sinn!";
        $fileopen   =   fopen($path."test.txt","w+");
        $ok = fwrite($fileopen, $string);
        fclose($fileopen);
        $this->assertEquals($ok, strlen($string));
    }
    
    public function addFileWithImgExt($path)
    {
        $fileopen   =   fopen($path."test.jpg","w+");
        fwrite($fileopen, "");
        fclose($fileopen);
    }
    
    public function getFileMock()
    {
        return $this->getMock("\\lw_file", array("__construct","getName"));
    }
    
    public function getImageFileMock()
    {
        return $this->getMock("\\lw_imagefile", array("__construct","getName"));
    }
}
